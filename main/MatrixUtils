import java.util.Arrays;

public class MatrixUtils {

    public static int[][] strassenMultiply(int[][] A, int[][] B) {
        int originalSize = A.length;
        int size = nextPowerOfTwo(originalSize);

        int[][] paddedA = padMatrix(A, size);
        int[][] paddedB = padMatrix(B, size);

        int[][] paddedResult = strassenRecursive(paddedA, paddedB);

        return trimMatrix(paddedResult, originalSize);
    }

    private static int nextPowerOfTwo(int n) {
        int power = 1;
        while (power < n) {
            power *= 2;
        }
        return power;
    }

    private static int[][] padMatrix(int[][] matrix, int size) {
        int[][] padded = new int[size][size];
        for (int i = 0; i < matrix.length; i++) {
            System.arraycopy(matrix[i], 0, padded[i], 0, matrix[i].length);
        }
        return padded;
    }

    private static int[][] trimMatrix(int[][] matrix, int size) {
        int[][] trimmed = new int[size][size];
        for (int i = 0; i < size; i++) {
            System.arraycopy(matrix[i], 0, trimmed[i], 0, size);
        }
        return trimmed;
    }

    private static int[][] strassenRecursive(int[][] A, int[][] B) {
        int n = A.length;
        if (n == 1) {
            return new int[][]{{A[0][0] * B[0][0]}};
        }

        int newSize = n / 2;
        int[][] a11 = new int[newSize][newSize];
        int[][] a12 = new int[newSize][newSize];
        int[][] a21 = new int[newSize][newSize];
        int[][] a22 = new int[newSize][newSize];

        int[][] b11 = new int[newSize][newSize];
        int[][] b12 = new int[newSize][newSize];
        int[][] b21 = new int[newSize][newSize];
        int[][] b22 = new int[newSize][newSize];

        split(A, a11, 0, 0);
        split(A, a12, 0, newSize);
        split(A, a21, newSize, 0);
        split(A, a22, newSize, newSize);

        split(B, b11, 0, 0);
        split(B, b12, 0, newSize);
        split(B, b21, newSize, 0);
        split(B, b22, newSize, newSize);

        int[][] p1 = strassenRecursive(add(a11, a22), add(b11, b22));
        int[][] p2 = strassenRecursive(add(a21, a22), b11);
        int[][] p3 = strassenRecursive(a11, subtract(b12, b22));
        int[][] p4 = strassenRecursive(a22, subtract(b21, b11));
        int[][] p5 = strassenRecursive(add(a11, a12), b22);
        int[][] p6 = strassenRecursive(subtract(a21, a11), add(b11, b12));
        int[][] p7 = strassenRecursive(subtract(a12, a22), add(b21, b22));

        int[][] c11 = add(subtract(add(p1, p4), p5), p7);
        int[][] c12 = add(p3, p5);
        int[][] c21 = add(p2, p4);
        int[][] c22 = add(subtract(add(p1, p3), p2), p6);

        int[][] C = new int[n][n];
        join(c11, C, 0, 0);
        join(c12, C, 0, newSize);
        join(c21, C, newSize, 0);
        join(c22, C, newSize, newSize);

        return C;
    }

    // Helper methods for addition, subtraction, split, and join
    public static int[][] add(int[][] A, int[][] B) {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] + B[i][j];
        return C;
    }

    public static int[][] subtract(int[][] A, int[][] B) {
        int n = A.length;
        int[][] C = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                C[i][j] = A[i][j] - B[i][j];
        return C;
    }

    public static void split(int[][] P, int[][] C, int iB, int jB) {
        for (int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
            for (int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                C[i1][j1] = P[i2][j2];
    }

    public static void join(int[][] C, int[][] P, int iB, int jB) {
        for (int i1 = 0, i2 = iB; i1 < C.length; i1++, i2++)
            for (int j1 = 0, j2 = jB; j1 < C.length; j1++, j2++)
                P[i2][j2] = C[i1][j1];
    }
}
