import java.io.*;
import java.util.*;

public class TCPClient {

    public static List<int[][]> readMatricesFromFile(String filename) {
        List<int[][]> matrices = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            List<int[]> currentMatrix = new ArrayList<>();
            String line;

            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty()) {
                    if (!currentMatrix.isEmpty()) {
                        matrices.add(currentMatrix.toArray(new int[0][]));
                        currentMatrix.clear();
                    }
                } else {
                    try {
                        currentMatrix.add(Arrays.stream(line.split("\\s+")).mapToInt(Integer::parseInt).toArray());
                    } catch (NumberFormatException e) {
                        System.out.println("Error parsing line: " + line);
                    }
                }
            }

            // Add last matrix if file does not end with a blank line
            if (!currentMatrix.isEmpty()) {
                matrices.add(currentMatrix.toArray(new int[0][]));
            }

            System.out.println("Total matrices read: " + matrices.size());
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
            e.printStackTrace();
        }

        return matrices;
    }
    public static void main(String[] args) {
        // Read matrices from file
        List<int[][]> matrices = readMatricesFromFile("main/file.txt");

        if (matrices.size() < 2) {
            System.out.println("Error: File should contain at least two matrices.");
            return;
        }

        int[][] matrixA = matrices.get(0);
        int[][] matrixB = matrices.get(1);

        // Ensure matrices are square and of the same size
        int n = matrixA.length;
        if (matrixA.length != matrixA[0].length || matrixB.length != matrixB[0].length || matrixA.length != matrixB.length) {
            System.out.println("Error: Matrices should be square and of the same size.");
            return;
        }

        // Start timing
        long startTime = System.nanoTime();

        // Perform Strassen multiplication
        int[][] result = MatrixUtils.strassenMultiply(matrixA, matrixB);

        // End timing
        long endTime = System.nanoTime();
        long duration = endTime - startTime; // Time in nanoseconds
        double durationInMillis = duration / 1_000_000.0; // Convert to milliseconds

        // Print the result
        System.out.println("Result of Strassen Multiplication:");
        for (int[] row : result) {
            for (int elem : row) {
                System.out.print(elem + " ");
            }
            System.out.println();
        }

        // Print the time taken
        System.out.println("\nTime taken for Strassen multiplication: " + durationInMillis + " ms");
    }
}
