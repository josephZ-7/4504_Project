import java.io.*;
import java.net.*;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;


public class TCPClient {
    public static void main(String[] args) throws IOException, ClassNotFoundException {

        int portNumber = 55555;
        int matrixSize = 256;     // This should be either 16, 32, 64, 128, or 256
        int numberOfMatrices = 4; // This should be either 2, 4, 8, 16, or 32
        String hostName = "localhost";
        Socket socket = null;
        ObjectOutputStream out = null;
        ObjectInputStream in = null;

        try {

            socket = new Socket(hostName, portNumber);
            out = new ObjectOutputStream(socket.getOutputStream());
            in = new ObjectInputStream(socket.getInputStream());

        } catch (IOException e) {
            System.err.println("Couldn't connect to router: " + hostName);
            System.exit(1);
        }

        System.out.println("Connected to ServerRouter.");

        List<int[][]> fromClient = new ArrayList<>();

        generateMatrices(fromClient, matrixSize, numberOfMatrices);


/*
        Undoing this comment block will make the client print every matrix out before it's sent.
        Fine for smaller configurations (4x4, 2 matrixes)...
        Gets out of hand with larger ones (256x256, 32 matrixes)...

        for(int[][] matrix : fromClient){
            for (int i = 0; i < matrixSize; i++) {
                for (int j = 0; j < matrixSize; j++) {
                    System.out.print(matrix[i][j] + " ");
                }
                System.out.println();
            }
            System.out.println();
            System.out.println();
            System.out.println();
        }

*/

        int[][] fromServer;

        long clockStart = System.nanoTime();

        System.out.println("Client: Sending " + numberOfMatrices + ", " + matrixSize + " x " + matrixSize + " matrices.");

        out.writeObject(fromClient);


        fromServer = (int[][]) in.readObject();

        long clockEnd = 0;
        if (fromServer != null) {

            clockEnd = System.nanoTime();
            System.out.println("Client: Received response -->.");
        }

        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                System.out.print(fromServer[i][j] + " ");
            }
            System.out.println();
        }

        long duration = clockEnd - clockStart; // Time in nanoseconds
        double durationInMillis = duration / 1_000_000.0; // Convert to milliseconds

        // Print the time taken
        System.out.println("\nTime taken for Strassen multiplication: " + durationInMillis + " ms");

        out.close();
        in.close();
        socket.close();
    }

    private static void generateMatrices(List<int[][]> fromClient, int size, int matrixes) {
        for (int i = 0; i < matrixes; i++) {
            int[][] matrix = new int[size][size];
            Random rand = new Random();

            for (int j = 0; j < size; j++) {
                for (int k = 0; k < size; k++) {
                    matrix[j][k] = rand.nextInt(5); // Random small values to ensure it doesn't get out of hand
                }
            }

            fromClient.add(matrix);
        }
    }
}
